#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const { Op } = require("sequelize");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const { Conversation, Message } = require("../db/models");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

io.on("connection", (socket) => {
  socket.on("go-online", async (id) => {
    if (!onlineUsers.includes(id)) {
      onlineUsers.push(id);
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);

    const conversations = await Conversation.findAll({
      raw: true,
      attributes: ['id'],
      where: {
        [Op.or]: [
          { user1Id: id },
          { user2Id: id }
        ]
      }
    });

    // have signed in user join conversations they are a member of
    conversations.forEach((room) => {
      socket.join(`${room.id}`)
    })
  });

  socket.on("new-message", async (data) => {
    const senderId = data.sender.id;
    const { recipientId, text, conversationId, sender } = data;

    try {
      if (!senderId) {
        socket.emit("new-message-error", "New message error");
      }

      // if we already know conversation id, we can save time and just add it to message and return
      if (conversationId) {
        // check if both users belong to specific conversationId
        const validConversationUsers = await Conversation.verifyConversationUsers(
          conversationId,
          senderId,
          recipientId
        );

        if (!validConversationUsers) {
          socket.emit("new-message-error", "New message error");
        };

        const message = await Message.create({
          senderId,
          text,
          conversationId
        });
        const messageData = message.get({ plain: true });

        // return socket emit data to room
        return io.to(`${conversationId}`).emit("new-message", {
          message: messageData,
          sender: null,
        });
      }

      // if we don't have conversation id, find a conversation to make sure it doesn't already exist
      let conversation = await Conversation.findConversation(
        senderId,
        recipientId
      );

      if (!conversation) {
        // create conversation
        conversation = await Conversation.create({
          user1Id: senderId,
          user2Id: recipientId,
        });
        if (onlineUsers.includes(sender.id)) {
          sender.online = true;
        }
      }
      const message = await Message.create({
        senderId,
        text,
        conversationId: conversation.id,
      });
      const messageData = message.get({ plain: true });
      // return socket emit data to room
      return io.to(`${conversationId}`).emit("new-conversation", {
        recipientId: recipientId,
        message: messageData,
      });
    } catch (error) {
      socket.emit("new-message-error", error);
    }
  });

  socket.on("logout", (id) => {
    if (onlineUsers.includes(id)) {
      userIndex = onlineUsers.indexOf(id);
      onlineUsers.splice(userIndex, 1);
      socket.broadcast.emit("remove-offline-user", id);
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
